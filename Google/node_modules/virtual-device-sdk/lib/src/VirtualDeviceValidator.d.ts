import { IVirtualDeviceResult } from "./VirtualDevice";
export declare const VirtualDeviceScriptUnauthorizedError: Error;
export declare const VirtualDeviceValidatorUnauthorizedMessage: (invocationName: string) => string;
export declare class VirtualDeviceValidator {
    private virtualDevice;
    private subscribers;
    private sourceAPIBaseURL;
    private userID;
    constructor(token: string, userID: string, baseURL?: string, sourceAPIBaseURL?: string);
    subscribe(event: string, cb: any): void;
    unsubscribe(event: string): void;
    execute(virtualDeviceTestSequences: IVirtualDeviceTestSequence[], context?: any): Promise<any>;
    checkAuth(invocationName: string): Promise<any>;
    private emit(event, error, data, context?);
}
export interface IVirtualDeviceTest {
    sequence: number;
    sequenceIndex?: number;
    absoluteIndex?: number;
    input: string;
    comparison: string;
    expectedTranscript?: string;
    expectedStreamURL?: string;
}
export interface IVirtualDeviceTestSequence {
    invocationName: string;
    tests: IVirtualDeviceTest[];
}
export interface IVirtualDeviceValidatorResultItem {
    actual?: IVirtualDeviceResult;
    result?: "success" | "failure";
    status?: "scheduled" | "running" | "done";
    test: IVirtualDeviceTest;
}
export interface IVirtualDeviceValidatorResult {
    result?: "success" | "failure";
    tests: IVirtualDeviceValidatorResultItem[];
}
export declare class Validator {
    resultItem: IVirtualDeviceValidatorResultItem;
    error?: Error;
    constructor(resultItem: IVirtualDeviceValidatorResultItem, error?: Error);
    check(): boolean;
}
