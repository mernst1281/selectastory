import { ISilentEchoTestSequence, ISilentEchoValidatorResult, ISilentEchoValidatorResultItem } from "./VirtualDeviceValidator";
export declare const SilentEchoScriptSyntaxError: Error;
export declare type ISilentEchoScriptCallback = (error: Error, resultItem: ISilentEchoValidatorResultItem, context?: any) => void;
export declare class VirtualDeviceScript {
    private virtualDeviceValidator;
    constructor(token: string, userID: string, baseURL?: string, sourceAPIBaseURL?: string);
    tests(scriptContents: string): ISilentEchoTestSequence[];
    execute(scriptContents: string, context?: any): Promise<any>;
    validate(scriptContents: string): undefined | Error;
    prettifyAsPartialHTML(scriptContents: string, partialResultItems: ISilentEchoValidatorResultItem[], includeTimeContent?: boolean): string;
    prettifyAsHTML(result: ISilentEchoValidatorResult, includeTimeContent?: boolean): string;
    on(event: string, cb: ISilentEchoScriptCallback): void;
    off(event: string): void;
    checkAuth(scriptContents: string): Promise<any>;
    private detectInvocationName(input);
}
